// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pagerank.proto

#ifndef PROTOBUF_INCLUDED_pagerank_2eproto
#define PROTOBUF_INCLUDED_pagerank_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_pagerank_2eproto 

namespace protobuf_pagerank_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_pagerank_2eproto
namespace GeminiGraph {
class pagerank_msg;
class pagerank_msgDefaultTypeInternal;
extern pagerank_msgDefaultTypeInternal _pagerank_msg_default_instance_;
}  // namespace GeminiGraph
namespace google {
namespace protobuf {
template<> ::GeminiGraph::pagerank_msg* Arena::CreateMaybeMessage<::GeminiGraph::pagerank_msg>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace GeminiGraph {

// ===================================================================

class pagerank_msg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GeminiGraph.pagerank_msg) */ {
 public:
  pagerank_msg();
  virtual ~pagerank_msg();

  pagerank_msg(const pagerank_msg& from);

  inline pagerank_msg& operator=(const pagerank_msg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  pagerank_msg(pagerank_msg&& from) noexcept
    : pagerank_msg() {
    *this = ::std::move(from);
  }

  inline pagerank_msg& operator=(pagerank_msg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const pagerank_msg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const pagerank_msg* internal_default_instance() {
    return reinterpret_cast<const pagerank_msg*>(
               &_pagerank_msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(pagerank_msg* other);
  friend void swap(pagerank_msg& a, pagerank_msg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline pagerank_msg* New() const final {
    return CreateMaybeMessage<pagerank_msg>(NULL);
  }

  pagerank_msg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<pagerank_msg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const pagerank_msg& from);
  void MergeFrom(const pagerank_msg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pagerank_msg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 vertex = 1;
  void clear_vertex();
  static const int kVertexFieldNumber = 1;
  ::google::protobuf::uint32 vertex() const;
  void set_vertex(::google::protobuf::uint32 value);

  // float pr = 2;
  void clear_pr();
  static const int kPrFieldNumber = 2;
  float pr() const;
  void set_pr(float value);

  // @@protoc_insertion_point(class_scope:GeminiGraph.pagerank_msg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 vertex_;
  float pr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pagerank_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// pagerank_msg

// uint32 vertex = 1;
inline void pagerank_msg::clear_vertex() {
  vertex_ = 0u;
}
inline ::google::protobuf::uint32 pagerank_msg::vertex() const {
  // @@protoc_insertion_point(field_get:GeminiGraph.pagerank_msg.vertex)
  return vertex_;
}
inline void pagerank_msg::set_vertex(::google::protobuf::uint32 value) {
  
  vertex_ = value;
  // @@protoc_insertion_point(field_set:GeminiGraph.pagerank_msg.vertex)
}

// float pr = 2;
inline void pagerank_msg::clear_pr() {
  pr_ = 0;
}
inline float pagerank_msg::pr() const {
  // @@protoc_insertion_point(field_get:GeminiGraph.pagerank_msg.pr)
  return pr_;
}
inline void pagerank_msg::set_pr(float value) {
  
  pr_ = value;
  // @@protoc_insertion_point(field_set:GeminiGraph.pagerank_msg.pr)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace GeminiGraph

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_pagerank_2eproto
